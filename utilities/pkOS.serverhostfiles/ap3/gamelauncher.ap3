import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import time
import subprocess

def get_apps_list(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Find all links with href ending in '.ap4'
    app_links = [link['href'] for link in soup.find_all('a', href=lambda x: x and x.endswith('.ap4'))]

    return app_links

def download_and_run_code(url, destination_folder):
    response = requests.get(url)
    if response.status_code == 200:
        script = response.text
        subprocess.run(["python", "-c", script])
    else:
        print(f"Failed to download and run code. Status code: {response.status_code}")

def choose_server(server_options):
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        print("[gamelauncher.ap3]")
        print("[server options]:")
        for i, option in enumerate(server_options, start=1):
            print(f"[ {i} ] - {option['name']}")

        user_choice = input("[gamelauncher.ap3]: choose the server (q to quit): ")

        if user_choice.lower() == 'q':
            break

        try:
            index = int(user_choice) - 1
            if 0 <= index < len(server_options):
                os.system('cls' if os.name == 'nt' else 'clear')
                print("[gamelauncher.ap3]")
                print(f"[server]: {server_options[index]['url']}")
                return server_options[index]
            else:
                print("Invalid choice. Please enter a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number or 'q' to quit.")

def get_user_choice(options, prompt):
    while True:
        try:
            user_input = input(prompt)
            if user_input.lower() == 'q':
                return 'q'
            elif user_input.lower() == 'r':
                return 'r'

            index = int(user_input) - 1
            if 0 <= index < len(options):
                return options[index]
            else:
                print("Invalid choice. Please enter a valid number.")
        except ValueError:
            print("Invalid input. Please enter a number, 'r' to refresh, or 'q' to quit.")

if __name__ == "__main__":
    server_options = [
        {'name': 'url1 (hosted by niko and withering)', 'url': 'https://fdsafdsafdsa.pythonanywhere.com/ap4'},
        {'name': 'localhost:8000 - url2 (you host the ap4 server on localhost.)', 'url': 'http://localhost:8000/ap4/'},
        {'name': 'customURL - url3 (you enter the url u wanna read ap4 from)', 'url': ''}
    ]

    # Choose the server URL option
    chosen_server_option = choose_server(server_options)

    # If the chosen URL option is custom, prompt for the custom URL
    if not chosen_server_option['url']:
        chosen_server_option['url'] = input("Enter custom URL: ")

    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        # Construct the URL with /ap4/
        url_with_apps = urljoin(chosen_server_option['url'], 'ap4/')

        # Fetch the list of apps from the URL
        apps_to_download = get_apps_list(url_with_apps)

        # Display the list of apps and options
        print("[gamelauncher.ap3]")
        print(f"server connected: {chosen_server_option['url']}")
        print("[apps to download]:")
        for i, app_url in enumerate(apps_to_download, start=1):
            print(f"[ {i} ] - {app_url}")
        print("[ r ] - refresh stock")  # Added option to refresh apps list
        print("[ q ] - leave gamelauncher.ap3")  # Added option to refresh apps list

        # Get user input for app download
        user_choice = get_user_choice(apps_to_download, "[gamelauncher.ap3]: enter the number of the app to download: ")

        # Check if the user wants to quit
        if user_choice == 'q':
            break
        elif user_choice == 'r':  # Refresh apps list
            continue

        # Attempt to download and run the app
        selected_app_url = urljoin(url_with_apps, user_choice)
        download_and_run_code(selected_app_url, 'tempfiles')  # Use 'apps' as the subdirectory
        time.sleep(1)
